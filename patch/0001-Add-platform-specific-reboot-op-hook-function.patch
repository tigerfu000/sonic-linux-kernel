From 7f2f7b46abd30b925593b932f23cb22d858c3337 Mon Sep 17 00:00:00 2001
From: tiger_fu <tiger_fu@edge-core.com>
Date: Fri, 7 Feb 2025 10:03:01 +0000
Subject: [PATCH] Add platform specific system reboot when kernel reboot

 This patch only adds a function pointer and the function pointer will
 be called when it is not null in kernel reboot code path.
 If there is the requirement to execute platform specific system reset
 for kernel reboot, the function pointer can be used.

 Note that the platform specific reboot function does not cover 'kexec reboot'.
---
 include/linux/reboot.h |  2 +-
 kernel/kexec_core.c    |  2 +-
 kernel/panic.c         | 16 ++++++++++++++++
 kernel/reboot.c        | 22 ++++++++++++++++++++--
 4 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/include/linux/reboot.h b/include/linux/reboot.h
index 2b6bb593b..ea625cc88 100644
--- a/include/linux/reboot.h
+++ b/include/linux/reboot.h
@@ -164,7 +164,7 @@ void unregister_platform_power_off(void (*power_off)(void));
  * Architecture independent implemenations of sys_reboot commands.
  */
 
-extern void kernel_restart_prepare(char *cmd);
+extern void kernel_restart_prepare(char *cmd, bool is_kexec_reboot);
 extern void kernel_restart(char *cmd);
 extern void kernel_halt(void);
 extern void kernel_power_off(void);
diff --git a/kernel/kexec_core.c b/kernel/kexec_core.c
index 79c012fbb..22c662a1b 100644
--- a/kernel/kexec_core.c
+++ b/kernel/kexec_core.c
@@ -1175,7 +1175,7 @@ int kernel_kexec(void)
 #endif
 	{
 		kexec_in_progress = true;
-		kernel_restart_prepare("kexec reboot");
+		kernel_restart_prepare("kexec reboot", true);
 		migrate_to_reboot_cpu();
 
 		/*
diff --git a/kernel/panic.c b/kernel/panic.c
index e6c2bf04a..f5172e0c1 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -137,6 +137,8 @@ static long no_blink(int state)
 long (*panic_blink)(int state);
 EXPORT_SYMBOL(panic_blink);
 
+extern void (*platform_specific_op_in_reboot_fp)(void);
+
 /*
  * Stop ourself in panic -- architecture code may override this
  */
@@ -291,6 +293,20 @@ void panic(const char *fmt, ...)
 		panic_on_warn = 0;
 	}
 
+	/*
+	 * When kdump is enabled, the machine_kexec() will be executed to
+	 * switch the device from crashed kernel to captured kernel.
+	 * The crash information will be collected and the device will be rebooted
+	 * in the captured kernel.
+	 * Therefore, does not need to apply the custom reboot procedure when device
+	 * is crashed with kdump feature enabled.
+	 */
+	if (!kexec_crash_image && platform_specific_op_in_reboot_fp)
+	{
+		pr_emerg("Kernel panic... Call platform custom reboot\n");
+		platform_specific_op_in_reboot_fp();
+	}
+
 	/*
 	 * Disable local interrupts. This will prevent panic_smp_self_stop
 	 * from deadlocking the first cpu that invokes the panic, since
diff --git a/kernel/reboot.c b/kernel/reboot.c
index 6ebef11c8..d4e13d5ad 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -63,6 +63,13 @@ struct sys_off_handler {
  */
 void __weak (*pm_power_off)(void);
 
+/*
+ * If the function pointer is set, which means that this platform
+ * should trigger the custom reboot function by software.
+ */
+void (*platform_specific_op_in_reboot_fp)(void);
+EXPORT_SYMBOL(platform_specific_op_in_reboot_fp);
+
 /**
  *	emergency_restart - reboot the system
  *
@@ -79,11 +86,22 @@ void emergency_restart(void)
 }
 EXPORT_SYMBOL_GPL(emergency_restart);
 
-void kernel_restart_prepare(char *cmd)
+void kernel_restart_prepare(char *cmd, bool is_kexec_reboot)
 {
 	blocking_notifier_call_chain(&reboot_notifier_list, SYS_RESTART, cmd);
 	system_state = SYSTEM_RESTART;
 	usermodehelper_disable();
+	/*
+	 * For the device which need to execute custom reboot procedure.
+	 * We run the specific operation here before rebooting.
+	 *
+	 * Note thate this custom reboot procedure is not expected to
+	 * apply when 'kexec reboot'. Therefore, checking if the kernel restart
+	 * is triggered by 'kexec' before executing the specific operation.
+	 */
+	if (!is_kexec_reboot && platform_specific_op_in_reboot_fp)
+		platform_specific_op_in_reboot_fp();
+
 	device_shutdown();
 }
 
@@ -265,7 +283,7 @@ static void do_kernel_restart_prepare(void)
  */
 void kernel_restart(char *cmd)
 {
-	kernel_restart_prepare(cmd);
+	kernel_restart_prepare(cmd, false);
 	do_kernel_restart_prepare();
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
-- 
2.39.5

